name: performance-workshop
services:
  router-init:
    image: &routerImage ghcr.io/apollographql/router:v1.53.0
    user: root
    entrypoint:
      - "chown"
      - "1000:1000"
      - "/var/log/router"
    volumes:
      - router-logs:/var/log/router
  router:
    image: ghcr.io/apollographql/router:v1.53.0
    environment:
      # Note that APOLLO_KEY and APOLLO_GRAPH_REF will be rotated.
      - APOLLO_KEY=service:starstuff:f2b0DHv1d-qP4U8A8QUuxA
      - APOLLO_GRAPH_REF=starstuff@current
    entrypoint:
      - "/etc/router/.router/bootstrap.sh"
    ports:
      - "4000:4000"
    volumes:
      - ${PWD}/router:/etc/router
      - router-logs:/var/log/router
    labels:
      - dev.dozzle.name=router
      - dev.dozzle.group=apollo
      - loggable
    depends_on:
      - router-init
  subgraphs:
    image: alpine:latest
    entrypoint:
      - "/etc/subgraphs/subgraphs.sh"
    volumes:
      - ${PWD}/subgraphs:/etc/subgraphs
      - ${PWD}/router:/etc/router:rw
    labels:
      - dev.dozzle.name=subgraphs
      - dev.dozzle.group=apollo
      - loggable
  code-server:
    image: codercom/code-server:latest
    ports:
      - "8080:8080"
    environment:
      - VSCODE_PROXY_URI=
    entrypoint:
      - "/home/coder/.config/bootstrap.sh"
    volumes:
      - ${PWD}/code-server/.config:/home/coder/.config
      - ${PWD}/router:/etc/router:rw
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yaml
      - --web.enable-remote-write-receiver
    volumes:
      - ${PWD}/prometheus:/etc/prometheus
  grafana:
    image: grafana/grafana-oss
    ports:
      - "3000:3000"
    volumes:
      -  ${PWD}/grafana/grafana.ini:/etc/grafana/grafana.ini
      -  ${PWD}/grafana/provisioning:/etc/grafana/provisioning

# Dozzle is infinitely better than grafana for viewing logs, but for demo purposes grafana can be configured to watch for certain log events.
#  dozzle:
#    image: amir20/dozzle
#    command:
#      - --mode
#      - server
#      - --filter
#      - label=loggable
#      - --no-analytics
#    ports:
#      - "8081:8080"
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    healthcheck:
#      test: curl --fail http://localhost:8081/ || exit 1
#      interval: 1s
#      timeout: 1s
#      retries: 3
#      start_period: 60s

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init-tempo:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - tempo-data:/var/tempo
  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo/tempo.yaml" ]
    ports:
      - 3200:3200
    volumes:
      - ${PWD}/tempo:/etc/tempo
      - tempo-data:/var/tempo
    depends_on:
      - init-tempo
  init-loki:
    image: &lokiImage grafana/loki:latest
    user: root
    entrypoint:
      - "/etc/loki/loki.sh"
    volumes:
      - ${PWD}/loki:/etc/loki
      - loki-data:/tmp/loki:rw
  loki:
    image: *lokiImage
    ports:
      - 3100:3100
    command:
      - -config.file=/etc/loki/loki.yaml
    volumes:
      - ${PWD}/loki:/etc/loki
      - loki-data:/tmp/loki:rw
    depends_on:
      - init-loki
  promtail:
    image: grafana/promtail:latest
    volumes:
      - ${PWD}/promtail:/etc/promtail
      - router-logs:/var/log/router
    command: -config.file=/etc/promtail/promtail.yaml

volumes:
  tempo-data:
  loki-data:
  router-logs:
